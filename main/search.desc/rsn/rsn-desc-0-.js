searchState.loadedDescShard("rsn", 0, "Rsn - Rusty Notation\nSerde deserialization support.\nDeserializes <code>D</code> from <code>reader</code> using the default Rsn <code>Config</code>.\nDeserializes <code>D</code> from <code>slice</code> using the default Rsn <code>Config</code>.\nDeserializes <code>D</code> from <code>source</code> using the default Rsn <code>Config</code>.\nParse data or a reader into a sequence of Rsn events.\nSerde serialization support.\nSerializes <code>value</code> into a <code>String</code> using the default Rsn <code>Config</code>…\nSerializes <code>value</code> into a <code>String</code> using <code>Config::pretty()</code>.\nSerializes <code>value</code> into a <code>Vec&lt;u8&gt;</code> using the default Rsn …\nSerializes <code>value</code> into a writer using the default Rsn <code>Config</code>…\nParse data or a reader into a sequence of tokens.\nTypes for generically representing the parsed value from …\nTypes for writing Rsn.\nDeserializes Rsn using Serde.\nAn error that arose while deserializing Rsn.\nA deserialization error.\nThe kind of a deserialization error.\nA boolean literal was expected.\nA byte string literal was expected.\nA character literal was expected.\nAn enumerated value was expected.\nA floating point number was expected.\nAn integer was expected.\nA map was expected.\nA structure containing named fields was expected.\nAn option was expected.\nA sequence (list) was expected.\nA string literal was expected.\nA structure containing a tuple was expected.\nA unit type was expected.\nInvalid UTF-8 was encountered in the input or while …\nAn error from deserializing Serde.\nThe name of a type did not match what was expected.\nAn Rsn parsing error.\n<code>Some(_)</code> can only contain one value but more than one value …\nChecks that this deserializer has consumed all of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe kind of error that occurred.\nThe kind of error that occurred.\nThe offset of bytes in the source when the error occurred.\nThe location of the error, if available.\nReturns a deserializer for <code>source</code> with the given …\nA nested sequence of events has started.\nA boolean literal.\nA byte string literal.\nA character literal.\nA comment.\nThe configuration of a <code>Parser</code>.\nA nested sequence of events has concluded.\nAn error that arose while parsing Rsn events.\nA kind of error that arose while parsing Rsn events.\nA Rsn event from parsing Rsn.\nA kind of an event encountered when parsing Rsn.\nA <code>:</code> was expected.\nExpected a <code>,</code> or the end-variant of the specified <code>Nested</code>.\nA key in a map was expected.\nExpected either a map or a tuple.\nA value was expected.\nA floating point literal.\nAn identifier.\nAn integer literal.\nA sequence of values enclosed by square brackets.\nA sequence of key-value pairs enclosed by curly braces.\nA name/identifier.\nA kind of nestable types.\nParses input as a sequence of <code>Event</code>s.\nA primitive literal.\nA primitive literal.\nA string literal.\nAn error occurred tokenizing the input.\nAdditional data was found after a complete value was …\nA sequence of values enclosed by parentheses.\nAn end-of-file error was encountered when data was still …\nSets <code>Config::allow_implicit_map_at_root</code> to <code>allow</code> and …\nAllows parsing an implicit map at the root of the Rsn …\nReturns the current byte offset of the parser.\nReturns the range between the start of the containing …\nDeserializes <code>T</code> from <code>source</code> using this configuration.\nDeserializes <code>T</code> from <code>reader</code> using this configuration.\nDeserializes <code>T</code> from <code>source</code> using this configuration.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets <code>Config::include_comments</code> to <code>include</code> and returns self.\nWhen true, the parser will include <code>EventKind::Comment</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe kind of error that occurred.\nThe kind of this event.\nThe byte range of this error.\nThe byte offset of the source that produced this event.\nThe byte range of the name in the source.\nThe name/identifier.\nReturns a parser that parses <code>source</code> using <code>configuration</code>.\nValidates that <code>source</code> would parse successfully using …\nThe type of nesting.\nThe name of this nested context, if encountered.\nThe configuration for a <code>Serializer</code>.\nA Serde serializer that generates Rsn.\nSets <code>Config::anonymous_structs</code> and returns self.\nWhether to include the names of structures in.\nFinishes writing to the output and returns the output.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets <code>Config::implicit_map_at_root</code> and returns self.\nWhether a map-like type at the root of the document should …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a new serializer that writes to <code>output</code> using …\nReturns the default configuration.\nReturns the default configuration with nested indentation …\nReturns <code>value</code> serialized as Rsn with this configuration.\nReturns <code>value</code> serialized as Rsn with this configuration.\nSerializes <code>value</code> into <code>writer</code> using this configuration.\nThe writer configuration.\nA token kind that is expected to have a balanced number of …\nA boolean literal.\nCurly Braces\nSquare Brackets\nA byte literal.\nA byte string literal.\nA character literal.\nThe closing variant of a <code>Balanced</code> token.\nThe <code>:</code> character.\nThe <code>,</code> character.\nA comment\nAn error returned from a tokenizer.\nThe kind of an error returned from a tokenizer.\nA digit (0-9) was expected.\nA floating point literal.\nAn identifier (name).\nAn integer literal.\nAn integer literal.\nThe integer literal is too large to represent.\nAn invalid ASCII character was encountered.\nAn invalid floating point number was found.\nAn invalid unicode code point was encountered.\nA signed integer that fits within an <code>isize</code>.\nA carriage return without a corresponding <code>\\n</code> was …\nThe opening variant of a <code>Balanced</code> token.\nParentheses\nA signed integer that is too large to fit within an <code>isize</code>.\nA string literal.\nA token in an Rsn document.\nA kind of a token in an Rsn document.\nParses Rsn into a sequence of <code>Token</code>s.\nAn unexpected character was found.\nThe end of input was encountered when additional data was …\nAn unsigned integer that is too large to fit within an …\nAn unsigned integer that fits within an <code>usize</code>.\nWhitespace between other tokens.\nReturns this number cast to an <code>f64</code>.\nReturns this integer as a i128 if the value can fit in a …\nReturns this integer as a i16 if the value can fit in a i16\nReturns this integer as a i32 if the value can fit in a i32\nReturns this integer as a i64 if the value can fit in a i64\nReturns this integer as a i8 if the value can fit in a i8\nReturns this integer as a isize if the value can fit in a …\nReturns this integer as a u128 if the value can fit in a …\nReturns this integer as a u16 if the value can fit in a u16\nReturns this integer as a u32 if the value can fit in a u32\nReturns this integer as a u64 if the value can fit in a u64\nReturns this integer as a u8 if the value can fit in a u8\nReturns this integer as a usize if the value can fit in a …\nReturns the current byte offset of the tokenizer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a tokenizer that includes whitespace and comments.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if this number is equal to 0.\nThe kind of this token.\nThe kind of error that occurred.\nThe byte range of this token.\nThe byte range of the error.\nReturns a tokenizer that ignores whitespace and comments.\nAn array of values.\nAn array of values.\nA boolean.\nA boolean.\nA byte.\nA byte.\nA byte string.\nA byte string.\nA character.\nA character.\nExpected a kind of data, but encountered another kind.\nA floating point number.\nA floating point number.\nAn error from deserializing from a <code>Value</code>.\nAn identifier (name).\nAn identifier (name).\nAn integer.\nAn integer.\nAn integer was too larget to represent.\nInvalid UTF-8 was encountered.\nA list of values.\nA list of key-value pairs.\nA collection of key-value pairs.\nA collection of key-value pairs.\nNamed fields, represented as a map.\nA custom serialization error.\nA custom serialization error.\nA named structure.\nA named structure.\nA named structure.\nA value with a static lifetime.\nA string.\nA string.\nThe contents of a structure.\nAn error from serializing to a <code>Value</code>.\nA tuple of values.\nA tuple of values.\nA tuple of valuees.\nA value representable by Rsn.\nReturns the underlying bytes for this value, if it can be …\nReturns this value as a floating point number.\nReturns this value as a $r#type if the value is an integer …\nReturns this value as a $r#type if the value is an integer …\nReturns this value as a $r#type if the value is an integer …\nReturns this value as a $r#type if the value is an integer …\nReturns this value as a $r#type if the value is an integer …\nReturns this value as a $r#type if the value is an integer …\nReturns this value as a str, if possible.\nReturns this value as a $r#type if the value is an integer …\nReturns this value as a $r#type if the value is an integer …\nReturns this value as a $r#type if the value is an integer …\nReturns this value as a $r#type if the value is an integer …\nReturns this value as a $r#type if the value is an integer …\nReturns this value as a $r#type if the value is an integer …\nThe contents of the structure.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a value by serializing <code>value</code> using Serde.\nParses <code>source</code> as a <code>Value</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the owned version of <code>self</code>, copying any borrowed …\nReturns an owned representation of this name, copying to …\nReturns an owned representation, copying to the heap if …\nReturns an owned representation, copying to the heap if …\nReturns an owned representation, copying to the heap if …\nThe name of the structure.\nReturns an empty list.\nDeserializes <code>self</code> as <code>D</code> using Serde.\nReturns a value representing the unit type.\nRenders Rsn in its most compact representation.\nA writer configuration.\nRenders Rsn with indentation and line endings.\nA type that can be written as a primitive.q\nA low-level writer for the Rsn format.\nBegins a list/array. A corresponding call to <code>finish_nested</code> …\nBegins a map. A corresponding call to <code>finish_nested</code> must …\nBegins a named map. A corresponding call to <code>finish_nested</code> …\nBegins a named tuple. A corresponding call to <code>finish_nested</code>…\nBegins a tuple. A corresponding call to <code>finish_nested</code> must …\nFinishes writing and returns the output.\nFinishes the current nested value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInserts the configured newline character, if needed.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a writer that outputs to <code>output</code> using <code>config</code>.\nRenders this type to <code>buffer</code>.\nWrites a primitive value, formatting it as valid Rsn.\nWrites <code>ident</code> without any extra formatting.\nWrites a value.\nThe indentation to include for each level of nested data …\nThe newline character(s) to include when wrapping to a new …")